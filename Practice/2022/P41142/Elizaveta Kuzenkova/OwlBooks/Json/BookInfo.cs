// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var bookInfo = BookInfo.FromJson(jsonString);

namespace Json.Book.QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BookInfo
    {
        //[JsonProperty("authors", NullValueHandling = NullValueHandling.Ignore)]
        //public List<Author> Authors { get; set; }

        //[JsonProperty("by_statement", NullValueHandling = NullValueHandling.Ignore)]
        //public string ByStatement { get; set; }

        //[JsonProperty("contributions", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> Contributions { get; set; }

        //[JsonProperty("covers", NullValueHandling = NullValueHandling.Ignore)]
        //public List<double> Covers { get; set; }

        //[JsonProperty("created", NullValueHandling = NullValueHandling.Ignore)]
        //public InternalDatetime Created { get; set; }

        //[JsonProperty("description", NullValueHandling = NullValueHandling.Ignore)]
        //public TextBlock Description { get; set; }

        //[JsonProperty("dewey_decimal_class", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> DeweyDecimalClass { get; set; }

        //[JsonProperty("edition_name", NullValueHandling = NullValueHandling.Ignore)]
        //public string EditionName { get; set; }

        //[JsonProperty("first_sentence", NullValueHandling = NullValueHandling.Ignore)]
        //public TextBlock FirstSentence { get; set; }

        [JsonProperty("genres", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Genres { get; set; }

        //[JsonProperty("identifiers", NullValueHandling = NullValueHandling.Ignore)]
        //public Dictionary<string, object> Identifiers { get; set; }

        [JsonProperty("isbn_10", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Isbn10 { get; set; }

        [JsonProperty("isbn_13", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Isbn13 { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        //[JsonProperty("languages", NullValueHandling = NullValueHandling.Ignore)]
        //public List<Language> Languages { get; set; }

        //[JsonProperty("last_modified")]
        //public InternalDatetime LastModified { get; set; }

        //[JsonProperty("latest_revision", NullValueHandling = NullValueHandling.Ignore)]
        //public double? LatestRevision { get; set; }

        //[JsonProperty("lc_classifications", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> LcClassifications { get; set; }

        ///// <summary>
        ///// Library of Congress Control Numbers, linkable via https://lccn.loc.gov/<lccn>
        ///// </summary>
        //[JsonProperty("lccn", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> Lccn { get; set; }

        //[JsonProperty("links", NullValueHandling = NullValueHandling.Ignore)]
        //public List<Link> Links { get; set; }

        //[JsonProperty("notes", NullValueHandling = NullValueHandling.Ignore)]
        //public TextBlock Notes { get; set; }

        //[JsonProperty("number_of_pages", NullValueHandling = NullValueHandling.Ignore)]
        //public double? NumberOfPages { get; set; }

        ///// <summary>
        ///// Links to the Internet Archive record via https://archive.org/details/<ocaid>
        ///// </summary>
        //[JsonProperty("ocaid", NullValueHandling = NullValueHandling.Ignore)]
        //public string Ocaid { get; set; }

        ///// <summary>
        ///// OCLC Online Computer Library Center / WorldCat id, linkable via
        ///// https://www.worldcat.org/oclc/<oclc_number>
        ///// </summary>
        //[JsonProperty("oclc_numbers", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> OclcNumbers { get; set; }

        //[JsonProperty("other_titles", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> OtherTitles { get; set; }

        //[JsonProperty("pagination", NullValueHandling = NullValueHandling.Ignore)]
        //public string Pagination { get; set; }

        //[JsonProperty("physical_dimensions", NullValueHandling = NullValueHandling.Ignore)]
        //public string PhysicalDimensions { get; set; }

        //[JsonProperty("physical_format", NullValueHandling = NullValueHandling.Ignore)]
        //public string PhysicalFormat { get; set; }

        //[JsonProperty("publish_country", NullValueHandling = NullValueHandling.Ignore)]
        //public string PublishCountry { get; set; }

        //[JsonProperty("publish_date", NullValueHandling = NullValueHandling.Ignore)]
        //public string PublishDate { get; set; }

        //[JsonProperty("publish_places", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> PublishPlaces { get; set; }

        //[JsonProperty("publishers", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> Publishers { get; set; }

        //[JsonProperty("revision")]
        //public double Revision { get; set; }

        //[JsonProperty("series", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> Series { get; set; }

        //[JsonProperty("source_records", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> SourceRecords { get; set; }

        //[JsonProperty("subjects", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> Subjects { get; set; }

        //[JsonProperty("subtitle", NullValueHandling = NullValueHandling.Ignore)]
        //public string Subtitle { get; set; }

        //[JsonProperty("table_of_contents", NullValueHandling = NullValueHandling.Ignore)]
        //public List<object> TableOfContents { get; set; }

        //[JsonProperty("title")]
        //public string Title { get; set; }

        //[JsonProperty("type")]
        //public BookInfoType Type { get; set; }

        //[JsonProperty("weight", NullValueHandling = NullValueHandling.Ignore)]
        //public string Weight { get; set; }

        //[JsonProperty("work_titles", NullValueHandling = NullValueHandling.Ignore)]
        //public List<string> WorkTitles { get; set; }

        [JsonProperty("works")]
        public List<Work> Works { get; set; }
    }

    public partial class Author
    {
        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class InternalDatetime
    {
        [JsonProperty("type")]
        public CreatedType Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    public partial class TextBlock
    {
        [JsonProperty("type")]
        public DescriptionType Type { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }
    }

    /// <summary>
    /// A type based on the list of MARC21 language codes. See https://www.loc.gov/marc/languages/
    /// </summary>
    public partial class Language
    {
        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class Link
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public LinkType Type { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }
    }

    public partial class LinkType
    {
        [JsonProperty("key")]
        public PurpleKey Key { get; set; }
    }

    public partial class BookInfoType
    {
        [JsonProperty("key", NullValueHandling = NullValueHandling.Ignore)]
        public FluffyKey? Key { get; set; }
    }

    public partial class Work
    {
        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public enum CreatedType { TypeDatetime };

    public enum DescriptionType { TypeText };

    public enum PurpleKey { TypeLink };

    public enum FluffyKey { TypeEdition };

    public partial class BookInfo
    {
        public static BookInfo FromJson(string json) => JsonConvert.DeserializeObject<BookInfo>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BookInfo self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                CreatedTypeConverter.Singleton,
                DescriptionTypeConverter.Singleton,
                PurpleKeyConverter.Singleton,
                FluffyKeyConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class CreatedTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(CreatedType) || t == typeof(CreatedType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "/type/datetime")
            {
                return CreatedType.TypeDatetime;
            }
            throw new Exception("Cannot unmarshal type CreatedType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (CreatedType)untypedValue;
            if (value == CreatedType.TypeDatetime)
            {
                serializer.Serialize(writer, "/type/datetime");
                return;
            }
            throw new Exception("Cannot marshal type CreatedType");
        }

        public static readonly CreatedTypeConverter Singleton = new CreatedTypeConverter();
    }

    internal class DescriptionTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(DescriptionType) || t == typeof(DescriptionType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "/type/text")
            {
                return DescriptionType.TypeText;
            }
            throw new Exception("Cannot unmarshal type DescriptionType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (DescriptionType)untypedValue;
            if (value == DescriptionType.TypeText)
            {
                serializer.Serialize(writer, "/type/text");
                return;
            }
            throw new Exception("Cannot marshal type DescriptionType");
        }

        public static readonly DescriptionTypeConverter Singleton = new DescriptionTypeConverter();
    }

    internal class PurpleKeyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PurpleKey) || t == typeof(PurpleKey?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "/type/link")
            {
                return PurpleKey.TypeLink;
            }
            throw new Exception("Cannot unmarshal type PurpleKey");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PurpleKey)untypedValue;
            if (value == PurpleKey.TypeLink)
            {
                serializer.Serialize(writer, "/type/link");
                return;
            }
            throw new Exception("Cannot marshal type PurpleKey");
        }

        public static readonly PurpleKeyConverter Singleton = new PurpleKeyConverter();
    }

    internal class FluffyKeyConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(FluffyKey) || t == typeof(FluffyKey?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "/type/edition")
            {
                return FluffyKey.TypeEdition;
            }
            throw new Exception("Cannot unmarshal type FluffyKey");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (FluffyKey)untypedValue;
            if (value == FluffyKey.TypeEdition)
            {
                serializer.Serialize(writer, "/type/edition");
                return;
            }
            throw new Exception("Cannot marshal type FluffyKey");
        }

        public static readonly FluffyKeyConverter Singleton = new FluffyKeyConverter();
    }
}
