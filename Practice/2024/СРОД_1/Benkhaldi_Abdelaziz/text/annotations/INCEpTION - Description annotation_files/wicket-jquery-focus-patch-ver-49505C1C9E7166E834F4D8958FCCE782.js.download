


Wicket.Focus.requestFocus = function() {

 
 
 
 var WF = Wicket.Focus;
if (WF.refocusLastFocusedComponentAfterResponse && WF.lastFocusId) {
var toFocus = Wicket.$(WF.lastFocusId);
if (toFocus) {
Wicket.Log.info("Calling focus on " + WF.lastFocusId);
var safeFocus = function() {
try {

 
 
 
 
 if ($(toFocus).is( ":data('kendoComboBox')" )) {
$(toFocus).data("kendoComboBox").input.focus();
}
if ($(toFocus).is( ":data('kendoNumericTextBox')" )) {
$(toFocus).data("kendoNumericTextBox").focus();
}
else {
toFocus.focus();
}

 } catch (ignore) {

 }
};
if (WF.focusSetFromServer) {

 window.setTimeout(safeFocus, 0);
} else {

 var temp = toFocus.onfocus;
toFocus.onfocus = null;

 window.setTimeout(function () { safeFocus(); toFocus.onfocus = temp; }, 0);
}
} else {
WF.lastFocusId = "";
Wicket.Log.info("Couldn't set focus on element with id '" + WF.lastFocusId + "' because it is not in the page anymore");
}
} else if (WF.refocusLastFocusedComponentAfterResponse) {
Wicket.Log.info("last focus id was not set");
} else {
Wicket.Log.info("refocus last focused component not needed/allowed");
}
Wicket.Focus.refocusLastFocusedComponentAfterResponse = false;
}
Wicket.Event.remove(window, 'focusin', Wicket.Focus.focusin);
Wicket.Focus.focusin = function (event) {
event = Wicket.Event.fix(event);
var target = event.target;
if (target) {
var WF = Wicket.Focus;
WF.refocusLastFocusedComponentAfterResponse = false;

 
 
 
 
 var widget = $(target).parent().next("[data-role='combobox']");
if (widget && widget.length) {
target = widget[0];
}
else {
var widget2 = $(target).parent().next("[data-role='autocomplete']");
if (widget2 && widget2.length) {
target = widget2[0];
}
}

 var id = target.id;
WF.lastFocusId = id;
Wicket.Log.info("focus set on " + id);
}
}
Wicket.Event.add(window, 'focusin', Wicket.Focus.focusin);
